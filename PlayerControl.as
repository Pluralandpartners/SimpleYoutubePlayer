package  {		import flash.display.Sprite	import flash.events.MouseEvent	import flash.events.FullScreenEvent	import flash.display.StageDisplayState	import flash.events.Event	import com.greensock.TweenNano	import com.greensock.easing.*	import com.plural.youtube.YoutubePlayer	public class PlayerControl extends Sprite {				private var player:YoutubePlayer;		private var ismute:Boolean;		private var isfullscreen:Boolean;		private var list:Object;		private var me:Sprite;		private var coords:Object = {x:0,y:0}				public function PlayerControl() {						me = this;						coords.x = me.x;			coords.y = me.y;						toggle.btnplay.visible = false;			toggle.btnpause.visible = true;						fullscreen.normal.visible = true;			fullscreen.full.visible = false;						replay.visible = false;			toggle.alpha = 0;						ismute = true;			mute.gotoAndStop(2);						isfullscreen = false;						thumbs.y = 268;			thumbs.over.alpha = 0;						thumbs.thumbvid1.visible = false;			thumbs.thumbvid2.visible = true;						teaser.t1.visible = true;			teaser.t2.visible = false;		}				public function init(_player:YoutubePlayer, _list:Object) {						list = _list;			player = _player;						toggle.buttonMode = true;			replay.buttonMode = true;			fullscreen.buttonMode = true;			thumbs.buttonMode = true;			mute.buttonMode = true;						thumbs.addEventListener(MouseEvent.CLICK, toggleVideo);			fullscreen.addEventListener(MouseEvent.CLICK, toggleScreen);			replay.addEventListener(MouseEvent.CLICK, doReplay);			replay.addEventListener(MouseEvent.ROLL_OVER, doRollOver);			toggle.addEventListener(MouseEvent.CLICK, togglePlayer);			mute.addEventListener(MouseEvent.CLICK, toggleMute);						toggle.addEventListener(MouseEvent.ROLL_OVER, toggleOver);			toggle.addEventListener(MouseEvent.ROLL_OUT, toggleOut);						thumbs.addEventListener(MouseEvent.ROLL_OVER, thumbOver);			thumbs.addEventListener(MouseEvent.ROLL_OUT, thumbOut);						player.addEventListener(YoutubePlayer.PLAYER_PLAYBACK, playbackStart);			player.addEventListener(YoutubePlayer.PLAYER_FINISHED, playbackEnd);						stage.addEventListener(FullScreenEvent.FULL_SCREEN, screenStatus);				}		private function toggleOver(e:MouseEvent):void { if(player.status != 0){ toggle.alpha = 1; } }		private function toggleOut(e:MouseEvent):void { toggle.alpha = 0; }				private function thumbOver(e:MouseEvent):void { TweenNano.to(thumbs.over, .3, {alpha:.6}); }		private function thumbOut(e:MouseEvent):void { TweenNano.to(thumbs.over, .3, {alpha:0}); }				private function togglePlayer(e:MouseEvent):void {			if(player.ready && player.status != 0){				if (player.isPaused) {					player.play();					toggle.btnplay.visible = false;					toggle.btnpause.visible = true;				} else {					player.pause();					toggle.btnplay.visible = true;					toggle.btnpause.visible = false;				}			}		}		private function toggleScreen(e:MouseEvent):void {			if(isfullscreen){				stage.displayState = StageDisplayState.NORMAL;			}else{				stage.displayState = StageDisplayState.FULL_SCREEN;			}					}				private function playbackStart(e:Event):void {			replay.visible = false;			player.visible = true;			teaser.visible = false;			mute.visible = true;			divider.visible = true;			fullscreen.visible = true;			toggle.visible = true;			dispatchEvent( new Event ('LAUNCH_TITLE', true) );		}		private function playbackEnd(e:Event):void {			stage.displayState = StageDisplayState.NORMAL;			replay.visible = true;			player.visible = false;			teaser.visible = true;			teaser.alpha = .6;			mute.visible = false;			toggle.visible = false;			divider.visible = false;			fullscreen.visible = false;			TweenNano.to(thumbs, .3,{y:168});			TweenNano.to(replay, .3,{y:182});					}		private function toggleMute(e:MouseEvent):void {			if(player.ready){				if (ismute) {					ismute = false;					mute.gotoAndStop(1);					player.unMute();				} else {					ismute = true;					mute.gotoAndStop(2);					player.mute();				}			}		}		private function screenStatus(e:FullScreenEvent):void {			isfullscreen = e.fullScreen;			if (isfullscreen) {				fullscreen.normal.visible = false;				fullscreen.full.visible = true;					me.x = 0;				me.y = stage.fullScreenHeight - 250;				container.y = me.y*-1				teaser.visible = false;								toggle.x = (stage.fullScreenWidth/2)-223;				toggle.y = ((stage.fullScreenHeight/2)-125)*-1;								player.setSizePlayer(stage.fullScreenWidth, stage.fullScreenHeight);							} else {				fullscreen.normal.visible = true;				fullscreen.full.visible = false;								me.x = coords.x;				me.y = coords.y;				container.y = 0;				teaser.visible = true;								toggle.x = 0;				toggle.y = 0;								player.setSizePlayer(446, 250);						}		}		private function toggleVideo(e:MouseEvent){			teaser.alpha = 1			if(player.current == list.b){				teaser.t1.visible = true;				teaser.t2.visible = false;				TweenNano.delayedCall(0.3, function(){					thumbs.thumbvid1.visible = false;					thumbs.thumbvid2.visible = true;				});			}else{				teaser.t1.visible = false;				teaser.t2.visible = true;				TweenNano.delayedCall(0.3, function(){					thumbs.thumbvid1.visible = true;					thumbs.thumbvid2.visible = false;				});			} 			TweenNano.to(thumbs, .3,{y:258});			TweenNano.to(replay, .3,{y:282});						player.load(player.current == list.b ? list.a : list.b);					}		private function doReplay(e:MouseEvent){ 			player.replayVideo();			TweenNano.to(thumbs, .3,{y:258});			TweenNano.to(replay, .3,{y:282});		}		private function doRollOver(e:MouseEvent){ TweenNano.to(e.currentTarget.arrowRepeat, 0.8, {rotation:360, ease:Cubic.easeInOut}); }	}}