package  com.plural.youtube{			import flash.events.Event;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.display.Sprite;	import flash.system.Security	public class YoutubePlayer extends Sprite {					private var player:Object;		private var loader:Loader;		public var status:int;		public var current:String;				public static const ON_READY:String = "onReady";		public static const ON_ERROR:String = "onError";		public static const ON_STATE_CHANGE:String = "onStateChange";		public static const ON_PLAYBACK_QUALITY_CHANGE:String = "onPlaybackQualityChange";		public static const PLAYER_UNINITIALIZED:String = "playerUninitialized";		public static const PLAYER_FINISHED:String = "playerFinished";		public static const PLAYER_PLAYBACK:String = "playerPlayback";		public static const PLAYER_PAUSED:String = "playerPaused";		public static const PLAYER_BUFFERING:String = "playerBuffering";		public static const PLAYER_QUEUED:String = "playerQueued";		public function YoutubePlayer() {						Security.loadPolicyFile("http://youtube.com/crossdomain.xml");			Security.allowDomain("*");			Security.allowInsecureDomain("*");						loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);			loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));		}				private function onLoaderInit(e:Event):void {			addChild(loader);			loader.content.addEventListener("onReady", onPlayerReady);			loader.content.addEventListener("onError", onPlayerError);			loader.content.addEventListener("onStateChange", onPlayerStateChange);			loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);		}		private function onPlayerReady(e:Event):void {			player = loader.content;			dispatchEvent(new Event(YoutubePlayer.ON_READY, Object(e).data));		}			private function onPlayerError(e:Event):void {			dispatchEvent(new Event(YoutubePlayer.ON_ERROR, Object(e).data));		}		private function onPlayerStateChange(e:Event):void {						dispatchEvent(new Event(YoutubePlayer.ON_STATE_CHANGE, Object(e).data));			switch (Object(e).data) { 				case -1: dispatchEvent(new Event(YoutubePlayer.PLAYER_UNINITIALIZED));break;				case 0 : dispatchEvent(new Event(YoutubePlayer.PLAYER_FINISHED));break;				case 1 : dispatchEvent(new Event(YoutubePlayer.PLAYER_PLAYBACK));break;				case 2 : dispatchEvent(new Event(YoutubePlayer.PLAYER_PAUSED));break;				case 3 : dispatchEvent(new Event(YoutubePlayer.PLAYER_BUFFERING));break;				case 5 : dispatchEvent(new Event(YoutubePlayer.PLAYER_QUEUED));break;			}			status = Object(e).data;		}		private function onVideoPlaybackQualityChange(e:Event):void {			dispatchEvent(new Event(YoutubePlayer.ON_PLAYBACK_QUALITY_CHANGE, Object(e).data));		}		public function setVideoId(id:String, startTime:int =0):void{			player.cueVideoById(id, startTime);		}		public function play(){			player.playVideo();		}		public function pause(){			player.pauseVideo();		}		private function stopVideo(e:Event){			player.stopVideo();		}		public function replayVideo(){			player.pauseVideo();			player.seekTo(0, true);			player.playVideo();		}		public function mute(){			player.mute();		}		public function unMute(){			player.unMute();		}		public function isMuted():Boolean{			return player.isMuted();		}		public function setVolume(valume:int=100){			player.setVolume(valume);		}		public function getVolume():int{			return player.getVolume();		}		public function setSizePlayer(w:int, h:int){			player.setSize(w, h);		}					public function load(id:String){			setVideoId(id);			player.playVideo();			current = id;		}		public function get ready():Boolean { 			if(status == 5 || status == -1){				return false;			}else{				return true;			}		}		public function get isPaused():Boolean { 			return status == 2 ? true : false;		}	}}